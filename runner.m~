load('b.mat');

F = fea;
G = gnd;

h = classfreq(G);
N = length(h);
disp('Choose image classification algorithm');
disp('Type P for a principal component analysis + k-nearest neighbour search, or...');
AlgOption = input('Type L for a linear discriminant analysis classification: ', 's');

if AlgOption == 'P'
        
        disp('Choose k-nearest neighbour search options');
        k= pi;
        
        while floor(k) ~= k
            k = input('Input the number of nearest neighbours (integer): ');
        end
        k = uint8(k);
        
        disp('Choose metric for knn.')
        breakloop = 0;
        while breakloop ~= 1
            distopt = input('Type e for euclidean, s for standardised euclidean, c for chebychev distance or r for linear correlation: ', 's');
            
            switch distopt
                case 'e'
                    distanceoption = 'euclidean';
                    breakloop = 1;
                case 's'
                    distanceoption = 'seuclidean';
                    breakloop = 1;
                case 'c'
                    distanceoption = 'chebychev';
                    breakloop = 1;
                case 'r'
                    distanceoption = 'correlation';
                    breakloop = 1;
                otherwise
                    breakloop = 0;
            end
            
        end
        
        disp('Choose the range of eigenfaces (principal components) in PCA analysis');
        efacessample(F, G);
        a = pi;
        b = exp(1);
        while (floor(a) ~= a) && (floor(b) ~= b) && (a >= b)
            a = input('First face: ');
            b = input('Last face: ');
        end
        
        a = uint8(a);
        b = uint8(b);
        
        range = [a,b];
end



T = -pi;
while floor(T) ~= T &&  (T > 59 || T < 0)
    T = input('Choose the number of test images to draw from each class (< 59): ');
end
T = double(T);

accuracy = zeros(T,1);
Accuracy = zeros(T,1);


S = -pi;
while floor(S) ~= S && S < 1
    S = input('Choose the number of test runs: ');
end
S = double(S);


for s=1:S

for t =1:T
    
[TestData, TrainingData, GTest, GTrain] = DataSelect(t, F, G);
TestData = MeanIntensity(TestData);
TrainingData = MeanIntensity(TrainingData);

switch AlgOption
    case 'P'
        %%%%% PCA Algorithm %%%%%
        [Vsub, TrainCoord] = PCA(TrainingData, range);
        %project test data on V sub
        TestCoord = TestData*Vsub;



        %k nearest neighbours...
        [indices, distance] = knnsearch(TrainCoord, TestCoord, 'k', k, 'Distance', distanceoption); %index 

        %%%%Validation%%%%%

        results = zeros(t*N,1);
        for i = 1:t*N
            I = indices(i, :);
            results(i) = sum(GTrain(I) == GTest(i));
        end
        accuracy(t) = sum(results>=k/2)/length(results);
    case 'L'
        Model = fitcdiscr(TrainingData, GTrain);
        predictionlabels = predict(Model, TestData);
        accuracy(t) = sum(GTest == predictionlabels)/length(GTest);
end

%histogram(results);
end
Accuracy = Accuracy + accuracy;
end

Accuracy = Accuracy/S;
disp(['Success rate is ' num2str(Accuracy(T)*100) ' % for ' num2str(N*T) ' test images out of ' num2str(length(G) - N*T) '])
figure
plot(1:T, Accuracy);